#+TITLE: Flask + Tox
#+AUTHOR: Steve Kipp

* 2 seconds, what is Flask?
Flask is a tiny (sometimes called "micro") web framework for python. Flask in terms of ability there is
nothing tiny about Flask. I think a good way to describe Flask, is "for those who want less framework
in their framework"

* 2 more seconds, why use Flask?
Flask is a full webserver, it supports building not only APIs but can also support HTML serving.

Commonly in python you'll see alot of web development associated with Django. Django is feature
rich, so that includes things like user management, an admin portal, etc. Which is great but
it also forms opinionated software, and is a little more resistant to change.

Thats where Flask comes in, flask is small enough and powerful enough to mold to whatever problem
needs solving.

* Installation, and common dependecies
Since we're in the modern era of development all languages have package managers, and python has
pip. Pip is akin to NPM, Gradle, Maven etc. It functions almost exactly the same as well

#+BEGIN_SRC
    pip install Flask
#+END_SRC

Other common dependecies
 - venv / virtualenv (manages python dependecies in their own contained env)
 - SimpleJSON (JSON for laymen)
 - python-dotenv (enables support for environment variables good for
   sensitive information IE user/pass)

None of these required but you'll see them pretty commonly integrated into a lot
of tutorials without them mentioning to install them

* Hello, World!
Building the simplest form of application imaginable!

Whats going on here?
L3 -  we import the Flask class from the flask package (classes are uppercase)
L5 -  we instantiate the Flask class and store it in the app variable

Side note: WTF is __name__, we'll cover that in a second.

L7:L9 - this is a decorator that links routes to functions, so in this case
        we're linking the route '/' to the function hello_world() which simply returns
        the string 'Hello NGA!'

Another side note: what on earth is decorator? Stay tuned.

Running the application, is the exact same way you would run a normal python script

#+BEGIN_SRC
    python app.py
#+END_SRC

This will start the server - without hot reload on localhost:5000

You might sometimes see tutorials using the flask command, the reason I don't use
this is because it sets environment variables that I find hard to manage.
'flask' on the command line is the same as running flask as a python module
python -m flask run

* Whython?
This script is pretty straight forward if you know all of python's
definitely-not-stupid quirks.

lets talk about some of those not-stupid things:

** WTF is __name__?
first things first anything with __ is a python reserved variable. you'll see
it a bunch __init__ __name__ etc.

__name__ is a variable that stores/evaluates to the name of the current module
so at runtime in the case of L5 __name__ is going to be
...
...
...
__main__ wait what?

** What is that if statement at the bottom?
We just talked about how __name__ is reserverd / evaluates to the name of the
module being run.

UNLESS! that module (is the file) run from the command line, gotcha!
In this case __name__ will evaulate to '__main__'

Which means that in the command we ran to start flask
#+BEGIN_SRC
    python app.python
#+END_SRC

__name__ is going to evaluate to __main__ and thats then going to call app
(our flask application) to call the run function.

That name variable, if for instance is run in another file say we have a db
connection file db.py and it has a module called DB, if we were to import db.py
and then evaluate __name__ it will be 'db.py'

** What is a decorator?
On LX you'll notice what theres some strange syntax before the function.
#+BEGIN_SRC
    @app.route('/')
#+END_SRC

You'll see a lot of definitions of a decorator that say a decorator takes a function, adds functionality and returns it. Which makes it sound like its something new but it isn't.

A decorator is just short hand for passing a function in to a another function and returning that function.

#+BEGIN_SRC
    @stupid
    def hello_world():
       print("Hello World")
#+END_SRC

is the same as

#+BEGIN_SRC
    def hello_world():
        print("Hello World")

    some_variable = stupid(hello_world)
#+END_SRC

so in the case of our flask application we're passing our function into the function app.route('/')

SIDENOTE: while not super relavent to this, it should be known.
That decorators are run at compile time - or interpreted time, they function similar to a macro and can be
considered metaprogramming, if you're looking for more confusion

* Who needs databases?

Now that we understand .00001% of the goofy in python, we need
to make our data persist.

Typically you'll see flask connecting to some sort of database
backend (Postgres/Mongo/Trendy new database that makes questionable sense).
For the sake of this I'm self containing everything so I'm going to use sqlite3.

Our database will have one single table Customers[id (int), name (varchar)]

We'll make a subfolder named db and make a python module 'db.py'

* So many classes, so little time...

Lets take a look at db.py, its a very small files containing the functions
that expose the functionality of our database.

L1 - import the sqlite3 module, you'll notice that we didn't have to pip install this.
SQLite3 is built in to the python standard library as of Python2.5, (this is not the case for postgres)

L3 - Thats what this section header is about, usually these (especially as well see in the template)
These are usually classes to encapsulate the functionality, but its important to note that this
object orientation isn't strict.

L4 - you guessed it, there are those two underscores which indicates that this is a python reserved variable
The init function is a part of python classes that acts as the class constructor.
Here we establish the connection as well as the cursor

L8 - This is our actual functionality, we'll use the cursor to execut
our SQL query, and return the result.

Now lets switch back and implement our function into our primary routes
to app.py
At the top of the file
#+BEGIN_SRC
    from db.db import SQLiteDatabase()
#+END_SRC

#+BEGIN_SRC
    @app.route('/customers')
    def get_customers():
        return SQLiteDatabase().get_all()
#+END_SRC


Now if we restart the server and hit the endpoint localhost:5000/customers
We'll get a list of all of the customers!


* The template

[Redacted]

* Testing
Testing in python can seem a litle daunting at first due to mocking, asserts and what not.
Truth be told testing is almost exactly what you think it is.

Lets start with a test using ol' reliable, our eyes.
In test_db.py on L8 we'll print the results of our db function call.

Run the file as you would any other python file and look at results?
They look right to me.

While it seems mindblowingly stupid, this is a test, just a really bad one
We're calling our function and verifying the result.

Obviously this isnt the best strategy as, we're mere humans and our tiny pea brains can think as fast a computer.

We need a way to do this automatically, welcome assert

In our test file we'll add a function on L8 called 'sweet_test'
L9 - we'll run our function we're testing, and store the results
L10 - this is where the magic happens, we're going to run the assert function
The way that assert behaves is a little odd at first, its a conditional with 2 outcomes, success or failure
In the event that the assert succeeds (our results are correct) it does nothing and continues
In the event that it fails an exception is thrown and the program is halted.

The way this test is structured it verfies what the output should be, and if not it will fail.



* Birds aren't real / Everything is fake

Right now the way everything is run can get tedious very fast, having the program fault on failure, etc.

Tox is a built in python standard library framework for managing unit tests.


* PEP8

* FIN
